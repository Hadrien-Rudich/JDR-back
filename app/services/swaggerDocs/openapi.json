{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Compagnon-JDR - OpenAPI 3.0",
    "description": "Bienvenue dans l'API de l'application Compagnon-JDR.\n\nJ'ai profité des derniers jours pour m'amuser avec [Swagger-UI](https://swagger.io/) et [Rapidoc](https://rapidocweb.com/index.html)\n\n_Compagnon-JDR est un projet de fin de formation qui me tient à coeur et je compte l'emmener plus loin au cours de l'année_\n\nCette API n'utilisera que les règles et contenus de la 5eme édition de Donjons et Dragons [SRD](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf) et de sa traduction française du site [AideDD](https://www.aidedd.org/)\n\n« Compagnon-JDR est un contenu de fan non officiel autorisé dans le cadre de la Politique des contenus de fans. Ni approuvé, ni promu par Wizards. Certaines parties des matériaux utilisés sont la propriété de Wizards of the Coast. ©Wizards of the Coast LLC. »",
    "termsOfService": "https://company.wizards.com/fr/legal/fancontentpolicy",
    "contact": {
      "email": "grct.renaud@gmail.com"
    },
    "license": {
      "name": "Licence MIT"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Livres de règles traduite en français",
    "url": "https://www.aidedd.org/adj/telechargement/"
  },
  "servers": [
    {
      "url": "http://localhost:4000/api"
    },
    {
      "url": "https://api-compagnon-jdr.herokuapp.com/api"
    }
  ],
  "tags": [
    {
      "name": "Authentification",
      "description": "Toutes les routes liées à l'authentification"
    },
    {
      "name": "Utilisateur",
      "description": "Toutes les routes qui concernent les comptes enregistrés"
    },
    {
      "name": "Invité",
      "description": "Toutes les routes qui concerne les comptes invités"
    },
    {
      "name": "Personnage",
      "description": "Toutes les routes qui concerne la création du personnage"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Authentification"
        ],
        "summary": "Connexion d'un compte utilisateur",
        "description": "Connecte un compte utilisateur et fourni un Token JWT",
        "operationId": "login",
        "requestBody": {
          "description": "Informations de connexion de l'utilisateur existant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/logout": {
      "delete": {
        "tags": [
          "Authentification"
        ],
        "summary": "Deconnexion d'un compte utilisateur",
        "description": "Deconnecte le compte utilisateur courant et vide le cookie 'jwt'",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentification"
        ],
        "summary": "Création d'un compte utilisateur",
        "description": "Insert un utilisateur en base de donnée",
        "operationId": "userId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request Response"
          }
        }
      }
    },
    "/auth/guest": {
      "post": {
        "tags": [
          "Authentification"
        ],
        "summary": "Connexion en tant qu'invité",
        "description": "Crée un compte invité généré automatiquement suivi d'un login.",
        "operationId": "findPetsByTags",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Guest"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request response"
          }
        }
      }
    },
    "/auth/refresh": {
      "get": {
        "tags": [
          "Authentification"
        ],
        "summary": "Refresh access token",
        "description": "Renvoie un nouvel access token si le refresh token est valide",
        "operationId": "getPetById",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/profile/{id}": {
      "get": {
        "tags": [
          "Utilisateur"
        ],
        "summary": "Informations du profil utilisateur",
        "description": "Renvoie toutes les informations de l'utilisateur",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Utilisateur"
        ],
        "summary": "Suppression du compte utilisateur",
        "description": "Retire l'utilisateur de la base de donnée",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "jwt",
            "in": "header",
            "description": "token jwt",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Utilisateur"
        ],
        "summary": "Mise à jour du compte utilisateur",
        "description": "Mise à jour des données personnelles de l'utilisateur",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "jwt",
            "in": "header",
            "description": "token jwt",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUser"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/character/user/{userId}": {
      "get": {
        "tags": [
          "Personnage"
        ],
        "summary": "Tous les personnages de l'utilisateur",
        "description": "Renvoie un array des personnages de l'utilisateur",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Character"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Character not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Personnage"
        ],
        "summary": "Création d'un personnage",
        "description": "Insertion d'un personnage en base de donnée",
        "operationId": "createCharacter",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID de l'utilisateur",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Character"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/character/{characterId}/user/{userId}": {
      "get": {
        "tags": [
          "Personnage"
        ],
        "summary": "Retourne les détails d'un personnage de l'utilisateur par son ID",
        "description": "Renvoie un JSON contenant toutes les informations du personnage",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Character not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/backgrounds": {
      "get": {
        "tags": [
          "Personnage"
        ],
        "summary": "Liste des Historiques",
        "description": "Renvoie un array d'objet de tous les historiques",
        "operationId": "placeOrder",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backgrounds"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Backgrounds not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/class/{index}": {
      "get": {
        "tags": [
          "Personnage"
        ],
        "summary": "Trouve une classe",
        "description": "Renvoie le détails d'une classe selon son index",
        "operationId": "getClassById",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Nom de la classe",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Class not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/race/{index}": {
      "get": {
        "tags": [
          "Personnage"
        ],
        "summary": "Trouve une race",
        "description": "Renvoie le détails d'une race selon son index",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "Nom de la race",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Race"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Race not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "Vecna"
          },
          "email": {
            "type": "string",
            "example": "Vecna@donjonsql.com"
          },
          "password": {
            "type": "string",
            "example": "@rch1l1che"
          }
        }
      },
      "Login": {
        "required": [
          "userName",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "userName": {
            "type": "string",
            "format": "string",
            "example": "Vecna"
          },
          "email": {
            "type": "string",
            "format": "string",
            "example": "Vecna@donjonsql.com"
          },
          "accessToken": {
            "type": "string",
            "format": "string",
            "example": "2eb.$@vecna15fd#.ac51!"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "Vecna"
          },
          "email": {
            "type": "string",
            "example": "Vecna@donjonsql.com"
          }
        }
      },
      "Race": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "name": {
            "type": "string",
            "example": "Norixius Balasar"
          },
          "speed": {
            "type": "string",
            "example": "9 m"
          },
          "extra_language": {
            "type": "integer",
            "format": "int64"
          },
          "night_vision": {
            "type": "boolean",
            "example": false
          },
          "score_modifier": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "score_name": {
                  "type": "string",
                  "example": "Strength"
                },
                "score_number": {
                  "type": "integer",
                  "format": "int64",
                  "example": 2
                }
              }
            }
          },
          "language": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Draconique"
            }
          },
          "racial_ability": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Ascendance draconique"
                },
                "description": {
                  "type": "string",
                  "example": "Description ..."
                }
              }
            }
          }
        }
      },
      "Class": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "name": {
            "type": "string",
            "example": "Paladin"
          },
          "proficiencies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "skills": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 3
                      },
                      "name": {
                        "type": "string",
                        "example": "Religion"
                      }
                    }
                  }
                },
                "saving_throws": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Sagesse"
                  }
                }
              }
            }
          },
          "feature": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 3
                },
                "name": {
                  "type": "string",
                  "example": "Imposition des mains"
                },
                "description": {
                  "type": "string",
                  "example": "Description ..."
                },
                "number_of_use": {
                  "type": "string",
                  "example": "5 + modificateur de charisme"
                },
                "reset": {
                  "type": "string",
                  "example": "Long repos"
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 3
                      },
                      "name": {
                        "type": "string",
                        "example": "Archerie"
                      },
                      "description": {
                        "type": "string",
                        "example": "Description..."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "jwt",
        "in": "header"
      }
    }
  }
}